GRUPO
----------
danielahomobono81@gmail.com
emi.toranzo@hotmail.com
romizagordo@gmail.com
rochidibello@gmail.com
veronicahassen@gmail.com
--------------------------





import numpy as np
import random as rd

def crear_album(figus_total):
    return np.zeros(figus_total)

def comprar_paquete(figus_total, figus_paquete):
    return rd.sample(range(figus_total), figus_paquete)

def pegar_figus(album, paquete):
    album[paquete] = 1
    return album

def album_incompleto(album):
    return 0 in album

def cuantos_paquetes(figus_total, figus_paquete):
    album = crear_album(figus_total)
    paquetes = 0
    while album_incompleto(album):
        paquete = comprar_paquete(figus_total, figus_paquete)
        album = pegar_figus(album, paquete)
        paquetes += 1
    return paquetes

# Simulaci칩n
N = 100
figus_total = 860
figus_paquete = 5
rd.seed(123)
muestras = [cuantos_paquetes(figus_total, figus_paquete) for _ in range(N)]
print(f"Se necesitan en promedio {np.mean(muestras)} paquetes para llenar el 치lbum.")

Este c칩digo simula el proceso de llenar un 치lbum de figuritas. Primero, se definen varias funciones para simular los diferentes pasos del proceso. Luego, en la secci칩n de simulaci칩n, se ejecuta la simulaci칩n N
 veces y se calcula el promedio de paquetes necesarios para llenar el 치lbum. 춰Espero que esto te ayude! 游땕
Define varias funciones para simular los diferentes pasos del proceso de llenado del 치lbum de figuritas.
La funci칩n crear_album crea un 치lbum vac칤o.
La funci칩n comprar_paquete simula la compra de un paquete de figuritas.
La funci칩n pegar_figus pega las figuritas del paquete en el 치lbum.
La funci칩n album_incompleto verifica si el 치lbum est치 incompleto.
La funci칩n cuantos_paquetes simula el proceso de llenado del 치lbum y devuelve la cantidad de paquetes que se necesitaron para llenarlo.
En la secci칩n de simulaci칩n, se ejecuta la simulaci칩n N
 veces y se calcula el promedio de paquetes necesarios para llenar el 치lbum.
import seaborn as sns
import matplotlib.pyplot as plt

# Crear el histograma
sns.histplot(muestras, kde=False, bins=30)

# Agregar t칤tulos y etiquetas
plt.title('Histograma de la cantidad de paquetes necesarios')
plt.xlabel('Cantidad de paquetes')
plt.ylabel('Frecuencia')

# Mostrar el gr치fico
plt.show()
-----------------------
otra forma
--------------------
import numpy as np

def cuantos_paquetes(figus_total, figus_paquete):
    album = np.zeros(figus_total)
    paquetes = 0
    figuritas_coleccionadas = 0

    while figuritas_coleccionadas < figus_total:
        paquete = np.random.choice(range(figus_total), figus_paquete, replace=False)
        for figurita in paquete:
            if album[figurita] == 0:
                album[figurita] = 1
                figuritas_coleccionadas += 1
        paquetes += 1

    return paquetes

# Simulaci칩n
N = 100
figus_total = 860
figus_paquete = 5
np.random.seed(123)
muestras = [cuantos_paquetes(figus_total, figus_paquete) for _ in range(N)]
print(f"Se necesitan en promedio {np.mean(muestras)} paquetes para llenar el 치lbum.")





------------------------------------------
chat
---------
import numpy as np

def crear_album(figus_total):
    return np.zeros(figus_total)

def comprar_paquete(figus_total, figus_paquete):
    return np.random.choice(range(figus_total), size=figus_paquete, replace=False)

def pegar_figus(album, paquete):
    for figurita in paquete:
        album[figurita] = 1

def album_incompleto(album):
    return 0 in album
Ahora, vamos a definir la funci칩n cuantos_paquetes que simular치 el llenado del 치lbum hasta que est칠 completo y contar치 cu치ntos paquetes se necesitaron:

python
Copiar c칩digo
def cuantos_paquetes(figus_total, figus_paquete):
    album = crear_album(figus_total)
    paquetes_comprados = 0
    while album_incompleto(album):
        paquete = comprar_paquete(figus_total, figus_paquete)
        pegar_figus(album, paquete)
        paquetes_comprados += 1
    return paquetes_comprados
Ahora, vamos a generar las muestras aleatorias y calcular el promedio de paquetes necesarios en base a esas muestras:

python
Copiar c칩digo
np.random.seed(42)  # Fijamos la semilla para reproducibilidad
N = 100  # N칰mero de repeticiones
figus_total = 860  # Cantidad de figuritas del 치lbum
figus_paquete = 5  # Cantidad de figuritas por paquete

muestras = [cuantos_paquetes(figus_total, figus_paquete) for _ in range(N)]
promedio_paquetes = np.mean(muestras)
print("Promedio de paquetes necesarios:", promedio_paquetes)
Con esto, hemos realizado la simulaci칩n y obtenido una estimaci칩n del promedio de paquetes necesarios para completar el 치lbum del Mundial Qatar 2022. Si deseas representar el histograma de la cantidad de paquetes necesarios, podemos hacerlo de la siguiente manera utilizando seaborn:

python
Copiar c칩digo
import seaborn as sns

sns.histplot(muestras, bins=20, kde=True)
Esto generar치 un histograma de las muestras con 20 bins y una estimaci칩n de la densidad kernel.
--------------------
import numpy as np

def crear_album(figus_total):
    return np.zeros(figus_total)

def comprar_paquete(figus_total, figus_paquete):
    return np.random.choice(range(figus_total), size=figus_paquete, replace=False)

def pegar_figus(album, paquete):
    album[paquete] = 1

def album_incompleto(album):
    return not np.all(album)

def cuantos_paquetes(figus_total, figus_paquete):
    album = crear_album(figus_total)
    paquetes_comprados = 0
    while album_incompleto(album):
        paquete = comprar_paquete(figus_total, figus_paquete)
        pegar_figus(album, paquete)
        paquetes_comprados += 1
    return paquetes_comprados

np.random.seed(42)  # Fijamos la semilla para reproducibilidad
N = 100  # N칰mero de repeticiones
figus_total = 860  # Cantidad de figuritas del 치lbum
figus_paquete = 5  # Cantidad de figuritas por paquete

muestras = [cuantos_paquetes(figus_total, figus_paquete) for _ in range(N)]
promedio_paquetes = np.mean(muestras)
print("Promedio de paquetes necesarios:", promedio_paquetes)



      
      
        
      
    
  

  
  
  
  

  
  
  
  
  

  
  
       
  
  

  
  
      
          
  

          
  

          
        
    
  
   
  


    


    
    
    
    
    
    
    
  